options {
  DEBUG_PARSER = false;
  JAVA_UNICODE_ESCAPE = true;
  STATIC              = false;
}

PARSER_BEGIN(PumaParser)

package plp.puma.parser;

import plp.puma.*;
import plp.puma.util.*;
import plp.puma.expressao.*;
import plp.puma.expressao.leftExpression.*;
import plp.puma.expressao.binaria.*;
import plp.puma.expressao.unaria.*;
import plp.puma.expressao.valor.*;
import plp.puma.comando.*;
import plp.puma.declaracao.classe.*;
import plp.puma.declaracao.variavel.*;
import plp.puma.declaracao.constante.*;
import plp.puma.declaracao.tipo.*;
import plp.puma.declaracao.*;
import plp.puma.declaracao.procedimento.*;
import plp.puma.memoria.*;
import plp.puma.excecao.declaracao.*;
import plp.puma.excecao.execucao.*;
import plp.puma.memoria.colecao.*;

/**
 * Parser para a Linguagem de Programação Orientada a Objetos
 */
public class PumaParser {

    private static final String FILE_CONTEXTO_INICIAL = "IniciaAmbientePuma.txt";

    /**
     * Método principal que executa um dado programa que pode ser fornecido
     * através da entrada padrão ou em um arquivo cujo nome entra como parâmetro
     * para esse método.
     * @param args Argumentos para o método.
     */
    public static void main(String args[]) {
    	PumaParser parser = null;
        PumaParser parserContextoInicial = null;
        if (args.length == 0) {
        	System.out.println("Puma PLP Parser Version 0.0.1:  Reading from standard input . . .");
            parser = new PumaParser(System.in);
        } else if (args.length == 1) {
            System.out.println("Puma PLP Parser Version 0.0.1:  Reading from file " + args[0] + " . . .");
            try {
            	parser = new PumaParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
            	System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
                return;
            }
        } else {
        	System.out.println("Puma PLP Parser Version 0.0.1:  Usage is one of:");
            System.out.println("         java PumaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java PumaParser inputfile");
            return;
        }

			// Inicia o ambiente do Puma com varávies pré-definidas
        System.out.println("Puma PLP Parser Version 0.0.1:  Reading from file " + FILE_CONTEXTO_INICIAL + " . . .");
        try {
        	parserContextoInicial = new PumaParser( new java.io.FileInputStream(FILE_CONTEXTO_INICIAL) );
        } catch (java.io.FileNotFoundException e) {
            System.out.println("Java Parser Version 1.0.2:  File " + FILE_CONTEXTO_INICIAL + " not found.");
            return;
        }


        try {
        	Programa programa = parserContextoInicial.processaEntrada();
            System.out.println("Puma PLP Parser Version 0.0.1:  Puma environment program parsed successfully.");

            // Contexto de compilação e execução são os mesmos para o parser do ambiente inicial e do programa
            ListaValor entrada = new ListaValor();
            ContextoCompilacao contextoCompilacao = new ContextoCompilacao(entrada);
            ContextoExecucao contextoExecucao = new ContextoExecucao();
            
            //	Inicialização do ambiente
            if( programa.checaTipo( contextoCompilacao ) ) {
            	ListaValor ambienteInicial = programa.executar(contextoExecucao);

                // Execução do programa
                programa = parser.processaEntrada();
                System.out.println("Puma PLP Parser Version 0.0.1:  Puma program parsed successfully.");
                if( programa.checaTipo( contextoCompilacao ) ) {
                	programa.executar( contextoExecucao );
                } else {
                	System.out.println("Erro de tipo");
                }
            } else {
                System.out.println("Erro de tipo na inicialização do ambiente.");
            }
        } catch (Exception e) {
          	if(e.getClass().getPackage().getName().equals("plp.puma.excecao.declaracao"))
          		new TryCatchException(e.getMessage(), e.getClass());
      		else {
	        	System.out.println("Puma PLP Parser Version 0.0.1:  Encountered errors during parse.");
	            e.printStackTrace();
        	}
        }
    }
}


PARSER_END(PumaParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* TOKENS DE EXPRESSOES 1 */
{
  < AND: "and" >
| < OR  : "or" >
| < NOT : "not" >
| < LENGTH      : "length" >
| < TRUE        : "true" >
| < FALSE       : "false" >
}

TOKEN : /* TOKENS DE IMPERATIVA 1 */
{
  < VAR: "var" >
| < COMAND_SKIP: "skip" >
| < WHILE: "while" >
| < DO: "do" >
| < READ: "read" >
| < WRITE: "write" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
}


TOKEN : /* TOKENS DE OO1 */
{
  < NEW: "new" >
| < THIS: "this" >
| < CLASSE: "classe" >
| < NULL: "null" >
| < PROC: "proc" >
| < ENUM: "enum">
| < THROW: "throw" > 
| < TRY: "try" >
| < CATCH: "catch" >
| < FINALLY: "finally" >
| < THROWSEXCEPTION: "throwsException" >
}


TOKEN : /* TOKENS DOS POSSÍVEIS TIPOS */
{	
  < INT : "int" >
| < BOOLEAN  : "boolean" >
| < STRING  : "string" >

}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| <QUOTATION: " \" ">
}

TOKEN : /* OPERATORS */
{
  < ATTRIB: ":=" >
| < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < CONCAT: "++" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
}

/**
 * Método chamado com o intuito de processar a entrada fornecida ao parser gerando
 * objeto do tipo Programa.
 **/
Programa processaEntrada() :
{
    Programa retorno;
}
{
	retorno = PPrograma() <EOF>
	{
		return retorno;
	}
}

/*
 * A partir de agora, serão expostos através desse tipo de comentário
 * as partes da BNF envolvidas no codigo mostrado em seguida.
 */


/**
 * Programa ::= "{" DecEnum ";" DecClasse ";" Comando "}"
 **/
Programa PPrograma() :
{
	DecClasse decClasse = null;
	Comando comando     = null;
}
{
	<LBRACE>
	decClasse = PDecClasse()
	<SEMICOLON>
	comando = PComando()
    <RBRACE>
	{
		return new Programa(decClasse, comando);
	}
}

/**
 * Comando::= ComandoSimples | ComandoSequencial
 **/
Comando PComando() :
{
	Comando retorno;
}
{
    (
        LOOKAHEAD (PComandoSimples() <SEMICOLON>)
        	retorno = PComandoSequencial()
      | retorno = PComandoSimples()
   	)
    {
        return retorno;
    }
}

/**
 * ComandoSequencial ::= ComandoSimples ";" Comando
 **/
Sequencial PComandoSequencial() :
{
	Comando c1;
	Comando c2;
}
{
	c1 = PComandoSimples()
	<SEMICOLON>
	c2 = PComando()
	{
		return new Sequencial(c1, c2);
	}
}

/**
 *
 * ComandoSimples ::= Skip
 *           		| ComDeclaracao
 *           		| While
 *           		| IfThenElse
 *           		| IO
 *           		| ChamadaMetodo
 *           		| New
 *          		| Atribuicao
 *                  | "("Comando")
 **/
Comando PComandoSimples() :
{
	Comando retorno;
}
{
    (
    	LOOKAHEAD(<COMAND_SKIP>)
    		retorno = PSkip()
      | LOOKAHEAD(<LBRACE>)
      		retorno = PComDeclaracao()
	  | LOOKAHEAD(<TRY> <LBRACE> PComando() <RBRACE> PListaCatch() <FINALLY>)
			retorno = PTryCatchFinally()
      | LOOKAHEAD(<TRY> <LBRACE> PComando() <RBRACE> <CATCH>)
			retorno = PTryCatch()
      | LOOKAHEAD(<TRY> <LBRACE> PComando() <RBRACE> <FINALLY>)
			retorno = PTryFinally()
	  | LOOKAHEAD(<THROW>)
            retorno = PThrow()
      | LOOKAHEAD(<WHILE>)
      		retorno = PWhile()
      | LOOKAHEAD(<IF>)
      		retorno = PIfThenElse()
      | LOOKAHEAD(<READ>|<WRITE>)
      		retorno = PIO()
      |	LOOKAHEAD(PExpressaoChamadora() <DOT> PId() <LPAREN>)
			retorno = PChamadaMetodo()
      | LOOKAHEAD(PLeftExpression() <ATTRIB> <NEW>)
      		retorno = PNew()
      | LOOKAHEAD(PLeftExpression() <ATTRIB>)
      		retorno = PAtribuicao()
      | <LPAREN> retorno = PComando() <RPAREN>
   )
    {
        return retorno;
    }
}

/**
 * Skip::=
 **/
Skip PSkip() :
{
}
{
	<COMAND_SKIP>
	{
		return new Skip();
	}
}

/**
 * ComDeclaracao :: = "{" DecVariavel ";" Comando "}"
 **/
ComDeclaracao PComDeclaracao() :
{
	Declaracao dec;
	Comando comando;
}
{
	<LBRACE>
		dec = PDecVariavel() <SEMICOLON> comando = PComando()
	<RBRACE>
 	{
 		return new ComDeclaracao(dec, comando);
 	}
}

/**
 * While ::= "while" Expressao do" "{" Comando "}"
 **/
While PWhile() :
{
	Expressao expressao;
	Comando comando;
}
{
	<WHILE>
		expressao = PExpressao()
	<DO> <LBRACE>
	    comando = PComando()
	     <RBRACE>
	{
		return new While(expressao, comando);
	}
}

/**
 * TryCatchFinally ::= "try {" Comando "} catch {" Comando "} finally {" Comando "}"
 **/
TryCatchFinally PTryCatchFinally() :
{
	Comando comandoTry;
	Comando comandoFinally;
  	ListaCatch listaCatch;
}
{
	<TRY> <LBRACE>
		comandoTry = PComando()
	<RBRACE>
	listaCatch = PListaCatch()
	<FINALLY> <LBRACE>
	    comandoFinally = PComando()
	<RBRACE>
	{
		return new TryCatchFinally(comandoTry, listaCatch, comandoFinally);
	}
}

/**
 * TryCatch ::= "try {" Comando "} catch {" Comando "}"
 **/
TryCatch PTryCatch() :
{
  	ListaCatch listaCatch;
	Comando comandoTry;
}
{
	<TRY> <LBRACE>
		comandoTry = PComando()
	<RBRACE>
  	listaCatch = PListaCatch()
	{
		return new TryCatch(comandoTry, listaCatch);
	}
}

/**
 * TryFinally ::= "try {" Comando "} finally {" Comando "}"
 **/
TryFinally PTryFinally() :
{
  	Tipo tipoExcecao;
	Id id;
	Comando comandoTry;
	Comando comandoFinally;
}
{
	<TRY> <LBRACE>
		comandoTry = PComando()
	<RBRACE>
	<FINALLY> <LBRACE>
	    comandoFinally = PComando()
	<RBRACE>
	{
		return new TryFinally(null, comandoTry, comandoFinally, null);
	}
}

/**
 * Throw ::= "throw" "new" Tipo "(" Valor ")"
 **/
Throw PThrow() :
{
	Tipo tipoExcecao;
	Valor mensagem;
}
{
	<THROW> <NEW> tipoExcecao = PTipo() <LPAREN> mensagem = PValor() <RPAREN>
	{
		return new Throw(tipoExcecao, mensagem);
	}
}

/**
 * IfThenElse ::= "if" Expressao "then" "{" Comando "}"
 *				| "if" Expressao "then" "{" Comando "}" "else" "{" Comando "}"
 **/
IfThenElse PIfThenElse() :
{
	Expressao expressao;
	Comando comandoThen;
	Comando comandoElse;
	IfThenElse resposta;
}
{
    (
        LOOKAHEAD(<IF> <LPAREN> PExpressao() <RPAREN> <LBRACE> PComando() <RBRACE> <ELSE>)
    	(
        	<IF> <LPAREN>
        		expressao = PExpressao()
        	<RPAREN>
        	    <LBRACE>
        		comandoThen = PComando()
        		<RBRACE>
        	<ELSE>
        	    <LBRACE>
        		comandoElse = PComando()
        		<RBRACE>
        	{
        		resposta = new IfThenElse (expressao, comandoThen, comandoElse);
        	}
        )
    	|
    	(
            <IF> <LPAREN>
        		expressao = PExpressao()
        	<RPAREN>
        	    <LBRACE>
        		comandoThen = PComando()
        		<RBRACE>
        	{
        		resposta = new IfThenElse (expressao, comandoThen, new Skip());
        	}
    	)
	)
	{
		return resposta;
	}
}

/**
 * ChamadaMetodo ::= ExpressaoChamadora "." Id "(" ListaExpressao ")"
 *                 | ExpressaoChamadora "." Id "("")"
 **/
ChamadaMetodo PChamadaMetodo() :
{
	Expressao expressao;
	Id nomeMetodo;
	ListaExpressao parametros= null;
}
{
    (
        LOOKAHEAD(PExpressaoChamadora()  <DOT> PId() <LPAREN>  <RPAREN>)
		expressao = PExpressaoChamadora() <DOT> nomeMetodo = PId() <LPAREN> <RPAREN>
	|
	    expressao = PExpressaoChamadora() <DOT> nomeMetodo = PId() <LPAREN> parametros = PListaExpressao() <RPAREN>
    )
	{
		if (parametros == null){
			parametros = new ListaExpressao();
		}
		return new ChamadaMetodo(expressao, nomeMetodo, parametros);
	}
}

/**
 * ListaExpressao ::= Expressao | Expressao "," ListaExpressao
 **/
ListaExpressao PListaExpressao() :
{
	ListaExpressao retorno;
	Expressao exp;
}
{
	(
		LOOKAHEAD(PListaExpressaoAtomica() <COMMA>)
		 	retorno = PListaExpressaoComposta()
		| exp = PListaExpressaoAtomica()
		{
			retorno = new ListaExpressao(exp);
		}
	)
	{
		return retorno;
	}
}

/**
 * ... Expressao "," ListaExpressao
 **/
ListaExpressao PListaExpressaoComposta():
{
	Expressao e1;
	ListaExpressao e2;
}
{
	e1 = PListaExpressaoAtomica() <COMMA> e2 = PListaExpressao()
	{
		return new ListaExpressao(e1, e2);
	}
}

/**
 * ...Expressao
 **/
Expressao PListaExpressaoAtomica():
{
	Expressao retorno;
}
{
	retorno = PExpressao()
	{
		return retorno;
	}

}

/**
 * ListaId ::= Id | Id , ListaId
 **/
ListaId PListaId() :
{
	ListaId retorno;
	Id id;
}
{
	(	
		LOOKAHEAD(PId() <COMMA>)
			retorno = PListaIdComposto()
		| id = PId()          
		{
			return new ListaId(id);
		}	
	)
	{
		return retorno;
	}		
}

/**
 * ... Id "," ListaId
 **/
ListaId PListaIdComposto():
{
	Id id1;
	ListaId id2;
}
{
	id1 = PId() <COMMA> id2 = PListaId()
	{
		return new ListaId(id1, id2);
	}
}

/**
 * New ::= LeftExpression ":=" "new" Tipo
 **/
New PNew():
{
	LeftExpression av;
	Tipo tipoInstancia;
}
{
	av = PLeftExpression() <ATTRIB> <NEW> tipoInstancia = PTipo()
	{
		return new New(av, tipoInstancia);
	}
}

/**
 * Atribuicao ::= LeftExpression ":=" Expressao
 **/
Atribuicao PAtribuicao() :
{
	LeftExpression av;
	Expressao exp;
}
{
	av = PLeftExpression() <ATTRIB> exp = PExpressao()
	{
		return new Atribuicao(av, exp);
	}
}

/**
 * IO ::= "write" "(" Expressao ")" | "read" "(" Id ")"
 **/
IO PIO() :
{
	IO retorno;
}
{
	(
		LOOKAHEAD(<WRITE>)
		  retorno = PWrite()
		| retorno = PRead()
	)
	{
		return retorno;
	}
}

/**
 * ... "read" "(" Id ")"
 **/
Read PRead() :
{
	Id id;
}
{
	<READ> <LPAREN>
		id = PId()
		   <RPAREN>
	{
		return new Read (id);
	}
}

/**
 * ... "write" "(" Expressao ")"
 **/
Write PWrite() :
{
	Expressao exp;
}
{
	<WRITE> <LPAREN>
		exp = PExpressao()
		   <RPAREN>
	{
		return new Write(exp);
	}
}

/**
 * Expressao ::= ExpUnaria | ExpBinaria | ExpPrimaria
 **/
Expressao PExpressao() :
{
	Expressao retorno;
}
{
	retorno = PExpBinaria()
	{
		return retorno;
	}
}


/**
 * ExpPrimaria ::= Valor | LeftExpression | this | "("Expressao")"
 **/
Expressao PExpPrimaria() :
{
    Expressao retorno;
}
{
	(

	    LOOKAHEAD(PLeftExpression())
	  		retorno = PLeftExpression()
	  | LOOKAHEAD(<THIS>)
	  		retorno = PThis()
	  | LOOKAHEAD(<LPAREN> PExpressao()<RPAREN>)
	  		<LPAREN> retorno = PExpressao() <RPAREN>
	  | retorno = PValor()
	)
	{
		return retorno;
	}
}

/**
 * Valor ::= ValorInteiro | ValorNull  | ValorBooleano | ValorString
 **/
Valor PValor() :
{
	Valor retorno;
}
{
	(
		 LOOKAHEAD(<NULL>)
      		retorno = PValorNull()
        |LOOKAHEAD(<INTEGER_LITERAL>)
      	  	retorno = PValorInteiro()
		| LOOKAHEAD(<TRUE>|<FALSE>)
			retorno = PValorBooleano()
		| retorno = PValorString()
    )

	{
		return retorno;
	}
}

/**
 * ... ValorInteiro
 **/
Valor PValorInteiro() :
{
	Token token;
}
{
	token = <INTEGER_LITERAL>
	{
		return new ValorInteiro(Integer.parseInt(token.toString()));
	}
}

/**
 * ... ValorNull
 **/
ValorNull PValorNull() :
{
}
{
	<NULL>
	{
		return new ValorNull();
	}
}

/**
 * ... ValorBooleano
 **/
Valor PValorBooleano() :
{
}
{
	LOOKAHEAD(<FALSE>)
		<FALSE>
		{
			return new ValorBooleano(false);
		}
	| <TRUE>
	{
		return new ValorBooleano(true);
	}
}


/**
 * ... ValorString
 **/
Valor PValorString() :
{
	Token token;
}
{
	token = <STRING_LITERAL>
	{
		String tokenStr = token.toString();

		//a seguir, serao retiradas as aspas do literal string
		tokenStr = tokenStr.substring(1,tokenStr.length()-1);

		return new ValorString(tokenStr);
	}
}

/**
 * ExpUnaria ::= "-" Expressao | "not" Expressao | "length" Expressao | ExpPrimaria
 **/

Expressao PExpUnaria() :
{
	Expressao retorno;
}
{
	(
	  retorno = PExpMenos()
	|
	  retorno = PExpNot()
	|
	  retorno = PExpLength()
	|
	  retorno = PExpPrimaria()
	)
	{
		return retorno;
	}
}


/**
 * ... "-" Expressao
 **/
Expressao PExpMenos() :
{
	Expressao retorno;
}
{
	<MINUS> retorno = PExpressao()
	{
		return new ExpMenos(retorno);
	}
}


/**
 * ... "not" Expressao
 **/
Expressao PExpNot() :
{
	Expressao retorno;
}
{
	<NOT> retorno = PExpressao()
	{
		return new ExpNot(retorno);
	}
}

/**
 * ... "length" Expressao
 **/
Expressao PExpLength() :
{
	Expressao retorno;
}
{
	<LENGTH> retorno = PExpressao()
	{
		return new ExpLength(retorno);
	}
}

/**
 * ExpBinaria ::= ExpUnaria
 *        ( "+" ExpUnaria
 * 				| "-" ExpUnaria
 * 				| "and" ExpUnaria
 * 				| "or" ExpUnaria
 * 				| "==" ExpUnaria
 * 				| "++" Expressao)*
 **/
Expressao PExpBinaria() :
{
	Expressao retorno, param2;
}
{
	( retorno = PExpUnaria()
	(
	  <CONCAT> param2 = PExpUnaria()
	  {
	  	retorno = new ExpConcat(retorno, param2);
	  }
	|
	  <MINUS> param2 = PExpUnaria()
	  {
	  	retorno = new ExpSub(retorno, param2);
	  }
	|
	  <AND> param2 = PExpUnaria()
	  {
	  	retorno = new ExpAnd(retorno, param2);
	  }
	|
	  <OR> param2 = PExpUnaria()
	  {
	  	retorno = new ExpOr(retorno, param2);
	  }
	|
	  <EQ> param2 = PExpUnaria()
	  {
	  	retorno = new ExpEquals(retorno, param2);
	  }
	|
	  <PLUS> param2 = PExpUnaria()
	  {
	  	retorno = new ExpSoma(retorno, param2);
	  }
	)*
	)
	{
		return retorno;
	}
}


/**
 * ... this
 **/
This PThis():
{
}
{
        <THIS>
	{
		return new This();
	}
}

/**
 * LeftExpression ::= Id | AcessoAtributo
 **/
LeftExpression PLeftExpression():
{
	LeftExpression retorno;
}
{
	(
		LOOKAHEAD(PAcessoAtributoId())
			retorno = PAcessoAtributoId()
		|LOOKAHEAD(PAcessoAtributoThis())
		  	retorno = PAcessoAtributoThis()
		|LOOKAHEAD(<IDENTIFIER>)
			retorno = PId()
	)
	{
		return retorno;
	}
}

/**
 * ... Id
 **/
Id PId() :
{
	Token token;
}
{
	token = <IDENTIFIER>
	{
		return new Id(token.toString());
	}
}

/**
 * AcessoAtributo ::= this.Id | (this).id | "("LeftExpression")".Id | Id.Id
 **/
AcessoAtributo PAcessoAtributo():
{
	AcessoAtributo retorno;
}
{
	(
		LOOKAHEAD(<THIS>)
			retorno = PAcessoAtributoThis()
	  |
	  	retorno = PAcessoAtributoId()
	)
	{
		return retorno;
	}
}

/**
 * ... this.Id | (this).id
 **/
AcessoAtributoThis PAcessoAtributoThis():
{
	This t;
	Id id;
}
{
	(
        LOOKAHEAD (<LPAREN>)
            <LPAREN> t = PThis() <RPAREN><DOT> id = PId()
        | t = PThis()<DOT> id = PId()
	)
    {
		return new AcessoAtributoThis(t, id);
	}
}


/**
 * ... "("LeftExpression")".Id | Id.Id
 **/
AcessoAtributoId PAcessoAtributoId():
{
	LeftExpression av;
	Id id;
}
{
	  (
		   LOOKAHEAD(<LPAREN>)
		   	<LPAREN> av = PLeftExpression() <RPAREN>
		  | av = PId()
	  )
	   <DOT> id = PId()
	{
		return new AcessoAtributoId(av, id);
	}
}

/**
 * Uma expressao chamadora eh aquela que chama um método. Ela sabe separar
 * o acesso de atributo, que é o que ela retorna, da chamada do método em si
 * (<DOT><IDENTIFIER><LPAREN>).
 *
 * PExpressaoChamadora:: this | id | LeftExpressionChamadora
 *
 */
Expressao PExpressaoChamadora():
{
    Expressao exp;
}
{
    (LOOKAHEAD(<THIS> <DOT> <IDENTIFIER> <LPAREN>)
	    exp = PThis()
    |LOOKAHEAD(<IDENTIFIER><DOT><IDENTIFIER><LPAREN>)
        exp = PId()
    |LOOKAHEAD (PLeftExpressionChamadora()<DOT> <IDENTIFIER> <LPAREN>)
        exp = PLeftExpressionChamadora()
    )
    {
    	return exp;
	}
}

/**
 * LeftExpressionChamadora ::=  AcessoAtributoChamador | AcessoAtributoThis | id
 **/
LeftExpression PLeftExpressionChamadora():
{
	LeftExpression retorno;
}
{
	(
		LOOKAHEAD(PAcessoAtributoIdChamador())
			retorno = PAcessoAtributoIdChamador()
        |LOOKAHEAD(PAcessoAtributoThis())
		  	retorno = PAcessoAtributoThis()
		|LOOKAHEAD(<IDENTIFIER>)
			retorno = PId()
	)
	{
		return retorno;
	}
}


/**
 * ... "("LeftExpressionChamadora")".Id | Id.Id
 **/

 AcessoAtributoId PAcessoAtributoIdChamador():
{
	LeftExpression av;
	Id id;
}
{
	  (
		   LOOKAHEAD(<LPAREN> PLeftExpressionChamadora() <RPAREN> <DOT> <IDENTIFIER>)
		   	<LPAREN> av = PLeftExpressionChamadora() <RPAREN> <DOT> id = PId()
		  | LOOKAHEAD(<IDENTIFIER> <DOT> <IDENTIFIER>)
            av = PId()<DOT> id = PId()
	  )

	{
		return new AcessoAtributoId(av, id);
	}
}

/**
 * DecClasse ::= "classe" Id "{" DecVariavel ";" DecProcedimento "}"
 *             | DecClasse "," DecClasse
 **/
DecClasse PDecClasse():
{
	DecClasse retorno;
}
{
	( LOOKAHEAD(PDecClasseAtomica() <COMMA>)
		retorno = PDecClasseComposta()
	| LOOKAHEAD(PDecEnumAtomica() <COMMA>)
		retorno = PDecClasseComposta()
	| LOOKAHEAD(PDecClasseAtomica() )
		retorno = PDecClasseAtomica()		
	| retorno = PDecEnumAtomica() )
	{
		return retorno;
	}
}

/**
 * ... "classe" Id [TipoGenerico] "{" DecVariavel ";" DecProcedimento "}"
 **/
DecClasse PDecClasseAtomica():
{
	Id nomeClasse;
	DecVariavel atributos 	= null;
	Tipo tipoGenerico 		= null;
	DecProcedimento metodos = null;
	DecClasseSimples classe = null;
}
{
	<CLASSE> nomeClasse = PId() [ <LT> tipoGenerico = PTipoGeneric() <GT> ] <LBRACE> atributos = PDecVariavel() <SEMICOLON> metodos = PDecProcedimento() <RBRACE>
	{
		if( tipoGenerico == null ) {
			classe = new DecClasseSimples(nomeClasse, atributos, metodos);
		}
		else {
			classe = new DecClasseGeneric(nomeClasse, atributos, metodos, tipoGenerico);
		}		
		return classe;
	}
}

/**
 * ... DecClasse "," DecClasse
 **/
DecClasseComposta PDecClasseComposta():
{
	DecClasse d1;
	DecClasse d2;
}
{
	( LOOKAHEAD(PDecClasseAtomica() )
		d1 = PDecClasseAtomica() <COMMA> d2 = PDecClasse()
	| d1 = PDecEnumAtomica() <COMMA> d2 = PDecClasse() )
	{
		return new DecClasseComposta(d1, d2);
	}
}


/**
 * Novo formato
 * ... "enum" Id "{" ListaConstanteEnum ";" DecVariavel ";" DecProcedimento "}"
 * DecVariavelConstEnum := Atributos
 **/
DecEnum PDecEnumAtomica():
{
	Id nomeEnum;
	DecConstanteEnum constantes = null;
	DecVariavel atributos = null;
	DecProcedimento metodos = null;
}
{
	<ENUM> nomeEnum = PId() <LBRACE> constantes = PDecConstantesEnum() <SEMICOLON> atributos = PDecVariavel() <SEMICOLON> metodos = PDecProcedimento() <RBRACE>
	{
		return new DecEnum(nomeEnum, constantes, atributos, metodos);
	}
}

/**
 * ListaConstanteEnum ::=  ConstanteEnum | ConstanteEnum "," ListaConstanteEnum
 */
DecConstanteEnum PDecConstantesEnum() :
{
  DecConstanteEnum retorno;
}
{
  (
    LOOKAHEAD(PDecConstanteEnumAtomica() <COMMA>)
    	retorno = PDecConstanteEnumComposto()
  	| retorno = PDecConstanteEnumAtomica()
	{
	   return retorno;
	}	  
  ) 
  {      
    return retorno;
  }
}

/**
 * ... ConstanteEnum "," ListaConstanteEnum
 */
DecConstanteEnum PDecConstanteEnumComposto():
{
  DecConstanteEnum constanteEnum;
  DecConstanteEnum constantesEnum;
}
{
  constanteEnum = PDecConstanteEnumAtomica() <COMMA> constantesEnum = PDecConstantesEnum()
  {
    return new CompostaDecConstanteEnum(constanteEnum, constantesEnum);
  }
}

/**
 * ConstanteEnum ::=  Id | Id "(" ListaExpressao ")"
 */
DecConstanteEnum PDecConstanteEnumAtomica() :
{
  Id nomeMetodo =  null;
  ListaExpressao listaExpressao = null;
}
{
  (
    LOOKAHEAD(PId() <LPAREN> listaExpressao = PListaExpressao() <RPAREN>)
	nomeMetodo = PId() <LPAREN> listaExpressao = PListaExpressao() <RPAREN> 
	| nomeMetodo = PId()
  )
  {
    return new SimplesDecConstanteEnum(nomeMetodo, listaExpressao);
  }
}

/**
 * ListaTipoExcecao ::=  Tipo | Tipo "," Tipo
 */
ListaTipoExcecao PListaTipoExcecao() :
{
  ListaTipoExcecao retorno;
  Tipo tipo;
}
{
  (
    LOOKAHEAD(PTipo() <BIT_OR>)
    	retorno = PListaTipoExcecaoComposto()
  	| tipo = PTipo()
	{
	   return new ListaTipoExcecao(tipo);
	}
  ) 
  {
    return retorno;
  }
}

/**
 * ... Tipo "," Tipo
 */
ListaTipoExcecao PListaTipoExcecaoComposto():
{
  ListaTipoExcecao tipos;
  Tipo tipo;
}
{
  tipo = PTipo() <BIT_OR> tipos = PListaTipoExcecao()
  {
    return new ListaTipoExcecao(tipo, tipos);
  }
}

/**
 * 
 */
ListaCatch PListaCatch() :
{
  ListaCatch catchs;
  Catch c;
}
{
  (
    LOOKAHEAD(<CATCH> <LPAREN> PListaTipoExcecao() PId() <RPAREN> <LBRACE> PComando() <RBRACE> <CATCH>)
    	catchs = PListaCatchComposto()
  	| c = PCatch()
	{
	   return new ListaCatch(c);
	}	  
  ) 
  {
    return catchs;
  }
}

/**
 * 
 */
ListaCatch PListaCatchComposto():
{
  ListaCatch catchs;
  Catch c;
}
{
  c = PCatch() catchs = PListaCatch()
  {
    return new ListaCatch(c, catchs);
  }
}

/**
 * DecVariavel ::= Tipo Id "=" Expressao
 *				 | DecVariavel "," DecVariavel
 *               | Tipo Id ":=" "new" Id
 *               | "("DecVariavel")"
 **/
DecVariavel PDecVariavel() :
{
	DecVariavel retorno;
}
{
	( LOOKAHEAD(PDecVariavelAtomica() <COMMA>)
		  		retorno = PCompostaDecVariavel()
	| retorno = PDecVariavelAtomica() )
	{
		return retorno;
	}
}

/**
 * ... DecVariavel "," DecVariavel
 **/
CompostaDecVariavel PCompostaDecVariavel():
{
	DecVariavel d1;
	DecVariavel d2;
}
{
	d1 = PDecVariavelAtomica() <COMMA> d2 = PDecVariavel()
	{return new CompostaDecVariavel(d1, d2);}
}

/**
 * ... Tipo Id "=" Expressao | Tipo Id ":=" "new" Id | "("DecVariavel")"
 **/
DecVariavel PDecVariavelAtomica():
{
	DecVariavel retorno;
}
{
	(  LOOKAHEAD(PTipo() PId() <ATTRIB> PTipo()<DOT>PId() )
		retorno = PDecVariavelEnum()
      | LOOKAHEAD(PTipo() PId() <ATTRIB> <NEW>)
		retorno = PDecVariavelObjeto()
      | LOOKAHEAD(<LPAREN> PDecVariavel() <RPAREN>)
      	<LPAREN> retorno = PDecVariavel() <RPAREN>
	  | LOOKAHEAD(PTipo() PId() <ASSIGN> PExpressao())
	  	retorno = PSimplesDecVariavel()
	)
	{
		return retorno;
	}
}

/**
 * ... Tipo Id ":=" "new" Tipo
 **/
DecVariavelObjeto PDecVariavelObjeto() :
{
	Id id;
	Tipo tipo, tipoClasse;
}
{
	tipo = PTipo() id = PId() <ATTRIB> <NEW> tipoClasse = PTipo()
	{
		return new DecVariavelObjeto(tipo, id, tipoClasse);
	}
}

/**
 * ... Tipo Id ":=" Tipo
 **/
DecVariavelEnum PDecVariavelEnum() :
{
	Id id, idClasse, idValor;
	Tipo tipo;
}
{
	tipo = PTipo() id = PId() <ATTRIB> idClasse = PId()<DOT> idValor = PId()
	{
		return new DecVariavelEnum(tipo, id, idClasse, idValor );
	}
}

/**
 * ... Tipo Id "=" Expressao
 **/
SimplesDecVariavel PSimplesDecVariavel() :
{
	Id id;
	Expressao exp;
	SimplesDecVariavel retorno;
	Tipo tipo;
}
{
	(
	     tipo = PTipo() id = PId() <ASSIGN> exp = PExpressao()
	   	 {
	   	 	retorno = new SimplesDecVariavel(tipo, id, exp);
	   	 }
	)
	{
		return retorno;
	}
}


/**
 * DecProcedimento ::= "proc" Id "("")" "{"Comando"}"
 *                   | "proc" Id "(" ListaDeclaracaoParametro ")" "{"Comando"}"
 *                   | DecProcedimento "," DecProcedimento
 **/
DecProcedimento PDecProcedimento():
{
	DecProcedimento retorno;
}
{
	(
		  LOOKAHEAD(PDecProcedimentoSimples() <COMMA>)
		  	retorno = PDecProcedimentoComposta()
		|   retorno = PDecProcedimentoSimples()

	)
	{
		return retorno;
	}
}

/**
 * ... DecProcedimento "," DecProcedimento
 **/
DecProcedimentoComposta PDecProcedimentoComposta():
{
	DecProcedimento d1;
	DecProcedimento d2;
}
{
	d1 = PDecProcedimentoSimples() <COMMA> d2 = PDecProcedimento()
	{
		return new DecProcedimentoComposta(d1, d2);
	}
}

/**
 * ... "proc" Id "("")" "{"Comando"}"|"proc" Id "(" ListaDeclaracaoParametro ")" "{"Comando"}"
 **/
DecProcedimento PDecProcedimentoSimples():
{
	Id nome;
	ListaDeclaracaoParametro listaPar = null;
	Comando comando;
}
{
    (
        LOOKAHEAD(<PROC> PId() <LPAREN> <RPAREN>)
    		<PROC> nome = PId() <LPAREN> <RPAREN> <LBRACE>
    		comando = PComando() <RBRACE>
    	|
    	<PROC> nome = PId() <LPAREN> listaPar = PListaDeclaracaoParametro() <RPAREN> <LBRACE>
    		comando = PComando() <RBRACE>
    )
	{
	    if(listaPar == null) {
	        listaPar = new ListaDeclaracaoParametro();
	    }
	    return new DecProcedimentoSimples(nome, listaPar, comando);
	}

}

/**
 * ListaDeclaracaoParametro ::= Tipo Id | Tipo Id "," ListaDeclaracaoParametro
 **/
ListaDeclaracaoParametro PListaDeclaracaoParametro() :
{
	ListaDeclaracaoParametro retorno;
	DecParametro decPar;
}
{
	(
		LOOKAHEAD(PDecParametroAtomico() <COMMA>)
		 	retorno = PDecParametroComposto()

		| decPar = PDecParametroAtomico()
		{
			retorno = new ListaDeclaracaoParametro(decPar);
		}
	)
	{
		return retorno;
	}
}

/**
 * ... Tipo Id "," ListaDeclaracaoParametro
 **/
ListaDeclaracaoParametro PDecParametroComposto():
{
	DecParametro d1;
	ListaDeclaracaoParametro d2;
}
{
	d1 = PDecParametroAtomico() <COMMA> d2 = PListaDeclaracaoParametro()
	{
		return new ListaDeclaracaoParametro(d1, d2);
	}
}

/**
 * ...Tipo Id
 **/
DecParametro PDecParametroAtomico():
{
	DecParametro retorno;
	Tipo tipo;
	Id id;
}
{
	tipo = PTipo()
	id = PId()
	{
		return new DecParametro(id, tipo);
	}

}

/**
 * 
 **/
Catch PCatch():
{
  	ListaTipoExcecao tiposExcecao;
	Comando comandoCatch;
	Id id;
}
{
	(
		<CATCH> <LPAREN> tiposExcecao = PListaTipoExcecao() id = PId() <RPAREN> <LBRACE>
		    comandoCatch = PComando()
		<RBRACE>
	)
	{
		return new Catch(tiposExcecao, comandoCatch, id);
	}
}

/**
 * Tipo ::= TipoGeneric | TipoConcreto
 **/
Tipo PTipo():
{
	Tipo tipo;
}
{
	(
		LOOKAHEAD(<LT> <IDENTIFIER> <GT>)
			<LT> tipo =  PTipoGeneric() <GT>
		|  
		    tipo = PTipoConcreto()
	)
	{
		return tipo;
	}
}

/**
 * TipoConcreto ::= TipoClasse | TipoClasseGeneric | TipoPrimitivo
 **/
Tipo PTipoConcreto():
{
	Tipo tipo;
}
{
	(
		LOOKAHEAD(<IDENTIFIER> <LT> <IDENTIFIER> <GT>)
			tipo = PTipoClasseGeneric()
		|
		LOOKAHEAD(<STRING>|<INT>|<BOOLEAN>)
			tipo = PTipoPrimitivo()
		|  
			tipo = PTipoClasse()
	)
	{
		return tipo;
	}
}

/**
 * TipoPrimitivo ::= "string" | "int" | "boolean"
 **/
Tipo PTipoPrimitivo() :
{
    Tipo retorno;
}
{
	(
	      LOOKAHEAD(<INT>)
		       <INT>
		       {
		       		retorno = TipoPrimitivo.TIPO_INTEIRO;
		       }

	     | LOOKAHEAD(<BOOLEAN>)
        	   <BOOLEAN>
		       {
		       		retorno = TipoPrimitivo.TIPO_BOOLEANO;
		       }

	     | <STRING>
	       {
	       		retorno = TipoPrimitivo.TIPO_STRING;
	       }
	)
	{
		return retorno;
	}
}

/**
 * TipoClasse ::= Id
 **/
Tipo PTipoClasse() :
{
    Tipo retorno;
    Id id;
}
{
	(
	       id = PId()
	       {
	       		retorno = new TipoClasse(id);
	       }
	)
	{
		return retorno;
	}
}

/**
 * TipoClasseGeneric ::=	TipoClasse<TipoClasseGeneric> | 
 * 							TipoClasse<TipoConcreto> |
 *							TipoClasse<TipoGeneric>
 **/
Tipo PTipoClasseGeneric() :
{
    Id idTipoClasse;
	Tipo tipoGeneric;
}
{
	(
		idTipoClasse = PId() <LT> tipoGeneric = PTipoGeneric() <GT>
	)
	{
		return new TipoClasseGeneric( idTipoClasse, tipoGeneric);
	}
}

/**
 * TipoGeneric ::= <Id>
 **/
Tipo PTipoGeneric() :
{
	Id tipoGeneric;
}
{
	(
		 tipoGeneric = PId()
	)
	{
		return new TipoGeneric(tipoGeneric);
	}
}