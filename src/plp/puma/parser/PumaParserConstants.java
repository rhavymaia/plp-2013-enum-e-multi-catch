/* Generated By:JavaCC: Do not edit this line. PumaParserConstants.java */
package plp.puma.parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface PumaParserConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 6;
	/** RegularExpression Id. */
	int FORMAL_COMMENT = 7;
	/** RegularExpression Id. */
	int MULTI_LINE_COMMENT = 8;
	/** RegularExpression Id. */
	int AND = 9;
	/** RegularExpression Id. */
	int OR = 10;
	/** RegularExpression Id. */
	int NOT = 11;
	/** RegularExpression Id. */
	int LENGTH = 12;
	/** RegularExpression Id. */
	int TRUE = 13;
	/** RegularExpression Id. */
	int FALSE = 14;
	/** RegularExpression Id. */
	int VAR = 15;
	/** RegularExpression Id. */
	int COMAND_SKIP = 16;
	/** RegularExpression Id. */
	int WHILE = 17;
	/** RegularExpression Id. */
	int DO = 18;
	/** RegularExpression Id. */
	int READ = 19;
	/** RegularExpression Id. */
	int WRITE = 20;
	/** RegularExpression Id. */
	int IF = 21;
	/** RegularExpression Id. */
	int THEN = 22;
	/** RegularExpression Id. */
	int ELSE = 23;
	/** RegularExpression Id. */
	int NEW = 24;
	/** RegularExpression Id. */
	int THIS = 25;
	/** RegularExpression Id. */
	int CLASSE = 26;
	/** RegularExpression Id. */
	int NULL = 27;
	/** RegularExpression Id. */
	int PROC = 28;
	/** RegularExpression Id. */
	int ENUM = 29;
	/** RegularExpression Id. */
	int THROW = 30;
	/** RegularExpression Id. */
	int TRY = 31;
	/** RegularExpression Id. */
	int CATCH = 32;
	/** RegularExpression Id. */
	int FINALLY = 33;
	/** RegularExpression Id. */
	int THROWSEXCEPTION = 34;
	/** RegularExpression Id. */
	int INT = 35;
	/** RegularExpression Id. */
	int BOOLEAN = 36;
	/** RegularExpression Id. */
	int STRING = 37;
	/** RegularExpression Id. */
	int INTEGER_LITERAL = 38;
	/** RegularExpression Id. */
	int DECIMAL_LITERAL = 39;
	/** RegularExpression Id. */
	int HEX_LITERAL = 40;
	/** RegularExpression Id. */
	int OCTAL_LITERAL = 41;
	/** RegularExpression Id. */
	int STRING_LITERAL = 42;
	/** RegularExpression Id. */
	int IDENTIFIER = 43;
	/** RegularExpression Id. */
	int LETTER = 44;
	/** RegularExpression Id. */
	int DIGIT = 45;
	/** RegularExpression Id. */
	int LPAREN = 46;
	/** RegularExpression Id. */
	int RPAREN = 47;
	/** RegularExpression Id. */
	int LBRACE = 48;
	/** RegularExpression Id. */
	int RBRACE = 49;
	/** RegularExpression Id. */
	int LBRACKET = 50;
	/** RegularExpression Id. */
	int RBRACKET = 51;
	/** RegularExpression Id. */
	int SEMICOLON = 52;
	/** RegularExpression Id. */
	int COMMA = 53;
	/** RegularExpression Id. */
	int DOT = 54;
	/** RegularExpression Id. */
	int QUOTATION = 55;
	/** RegularExpression Id. */
	int ATTRIB = 56;
	/** RegularExpression Id. */
	int ASSIGN = 57;
	/** RegularExpression Id. */
	int GT = 58;
	/** RegularExpression Id. */
	int LT = 59;
	/** RegularExpression Id. */
	int BANG = 60;
	/** RegularExpression Id. */
	int TILDE = 61;
	/** RegularExpression Id. */
	int HOOK = 62;
	/** RegularExpression Id. */
	int COLON = 63;
	/** RegularExpression Id. */
	int EQ = 64;
	/** RegularExpression Id. */
	int LE = 65;
	/** RegularExpression Id. */
	int GE = 66;
	/** RegularExpression Id. */
	int NE = 67;
	/** RegularExpression Id. */
	int SC_OR = 68;
	/** RegularExpression Id. */
	int SC_AND = 69;
	/** RegularExpression Id. */
	int CONCAT = 70;
	/** RegularExpression Id. */
	int PLUS = 71;
	/** RegularExpression Id. */
	int MINUS = 72;
	/** RegularExpression Id. */
	int STAR = 73;
	/** RegularExpression Id. */
	int SLASH = 74;
	/** RegularExpression Id. */
	int BIT_AND = 75;
	/** RegularExpression Id. */
	int BIT_OR = 76;
	/** RegularExpression Id. */
	int XOR = 77;
	/** RegularExpression Id. */
	int REM = 78;

	/** Lexical state. */
	int DEFAULT = 0;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"\"\\f\"", "<SINGLE_LINE_COMMENT>", "<FORMAL_COMMENT>",
			"<MULTI_LINE_COMMENT>", "\"and\"", "\"or\"", "\"not\"",
			"\"length\"", "\"true\"", "\"false\"", "\"var\"", "\"skip\"",
			"\"while\"", "\"do\"", "\"read\"", "\"write\"", "\"if\"",
			"\"then\"", "\"else\"", "\"new\"", "\"this\"", "\"classe\"",
			"\"null\"", "\"proc\"", "\"enum\"", "\"throw\"", "\"try\"",
			"\"catch\"", "\"finally\"", "\"throwsException\"", "\"int\"",
			"\"boolean\"", "\"string\"", "<INTEGER_LITERAL>",
			"<DECIMAL_LITERAL>", "<HEX_LITERAL>", "<OCTAL_LITERAL>",
			"<STRING_LITERAL>", "<IDENTIFIER>", "<LETTER>", "<DIGIT>", "\"(\"",
			"\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"", "\",\"",
			"\".\"", "\" \\\" \"", "\":=\"", "\"=\"", "\">\"", "\"<\"",
			"\"!\"", "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"", "\">=\"",
			"\"!=\"", "\"||\"", "\"&&\"", "\"++\"", "\"+\"", "\"-\"", "\"*\"",
			"\"/\"", "\"&\"", "\"|\"", "\"^\"", "\"%\"", };

}
